
UART_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003f9c  08003f9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f9c  08003f9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08004014  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004014  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d978  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ab  00000000  00000000  0002da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ba7  00000000  00000000  00031e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e5d  00000000  00000000  0004b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d65e  00000000  00000000  0005d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  000eaef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f08 	.word	0x08003f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003f08 	.word	0x08003f08

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000166:	1d3b      	adds	r3, r7, #4
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
 800016c:	605a      	str	r2, [r3, #4]
 800016e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000170:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <MX_ADC1_Init+0x74>)
 8000172:	4a19      	ldr	r2, [pc, #100]	; (80001d8 <MX_ADC1_Init+0x78>)
 8000174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <MX_ADC1_Init+0x74>)
 8000178:	2200      	movs	r2, #0
 800017a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <MX_ADC1_Init+0x74>)
 800017e:	2201      	movs	r2, #1
 8000180:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <MX_ADC1_Init+0x74>)
 8000184:	2200      	movs	r2, #0
 8000186:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <MX_ADC1_Init+0x74>)
 800018a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000190:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <MX_ADC1_Init+0x74>)
 8000192:	2200      	movs	r2, #0
 8000194:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000196:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <MX_ADC1_Init+0x74>)
 8000198:	2201      	movs	r2, #1
 800019a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <MX_ADC1_Init+0x74>)
 800019e:	f000 fd89 	bl	8000cb4 <HAL_ADC_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001a8:	f000 fa50 	bl	800064c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001b0:	2301      	movs	r3, #1
 80001b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	4619      	mov	r1, r3
 80001bc:	4805      	ldr	r0, [pc, #20]	; (80001d4 <MX_ADC1_Init+0x74>)
 80001be:	f000 ff0b 	bl	8000fd8 <HAL_ADC_ConfigChannel>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001c8:	f000 fa40 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001cc:	bf00      	nop
 80001ce:	3710      	adds	r7, #16
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	2000008c 	.word	0x2000008c
 80001d8:	40012400 	.word	0x40012400

080001dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e4:	f107 0310 	add.w	r3, r7, #16
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <HAL_ADC_MspInit+0x6c>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d121      	bne.n	8000240 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <HAL_ADC_MspInit+0x70>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a12      	ldr	r2, [pc, #72]	; (800024c <HAL_ADC_MspInit+0x70>)
 8000202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HAL_ADC_MspInit+0x70>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <HAL_ADC_MspInit+0x70>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <HAL_ADC_MspInit+0x70>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <HAL_ADC_MspInit+0x70>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0304 	and.w	r3, r3, #4
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800022c:	2301      	movs	r3, #1
 800022e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000230:	2303      	movs	r3, #3
 8000232:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <HAL_ADC_MspInit+0x74>)
 800023c:	f001 fa1e 	bl	800167c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000240:	bf00      	nop
 8000242:	3720      	adds	r7, #32
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40012400 	.word	0x40012400
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800

08000254 <command_parser_fsm>:
uint8_t isOK = 0;

uint8_t isRSTCmd(void);
uint8_t isOKCmd(void);

void command_parser_fsm(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	switch(sysState) {
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <command_parser_fsm+0x88>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <command_parser_fsm+0x12>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d02d      	beq.n	80002c0 <command_parser_fsm+0x6c>
		setTimer3(PARSER_TIMEOUT);
		printData = 0;
		sysState = WAIT_MODE;
		break;
	}
}
 8000264:	e038      	b.n	80002d8 <command_parser_fsm+0x84>
		if(isRST == 1) {
 8000266:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <command_parser_fsm+0x8c>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d10b      	bne.n	8000286 <command_parser_fsm+0x32>
			setTimer3(0);
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fa90 	bl	8000794 <setTimer3>
			isRST = 0;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <command_parser_fsm+0x8c>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
			printData = 1;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <command_parser_fsm+0x90>)
 800027c:	2201      	movs	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]
			sysState = PRINT_MODE;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <command_parser_fsm+0x88>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
		if(isOK == 1) {
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <command_parser_fsm+0x94>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d108      	bne.n	80002a0 <command_parser_fsm+0x4c>
			setTimer3(0);
 800028e:	2000      	movs	r0, #0
 8000290:	f000 fa80 	bl	8000794 <setTimer3>
			isOK = 0;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <command_parser_fsm+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
			printData = 0;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <command_parser_fsm+0x90>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
		if(timer3_flag == 1) {
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <command_parser_fsm+0x98>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d116      	bne.n	80002d6 <command_parser_fsm+0x82>
			setTimer3(0);
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 fa73 	bl	8000794 <setTimer3>
			clearBuffer();
 80002ae:	f000 f867 	bl	8000380 <clearBuffer>
			printData = 1;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <command_parser_fsm+0x90>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
			sysState = PRINT_MODE;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <command_parser_fsm+0x88>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
		break;
 80002be:	e00a      	b.n	80002d6 <command_parser_fsm+0x82>
		setTimer3(PARSER_TIMEOUT);
 80002c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002c4:	f000 fa66 	bl	8000794 <setTimer3>
		printData = 0;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <command_parser_fsm+0x90>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
		sysState = WAIT_MODE;
 80002ce:	4b03      	ldr	r3, [pc, #12]	; (80002dc <command_parser_fsm+0x88>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
		break;
 80002d4:	e000      	b.n	80002d8 <command_parser_fsm+0x84>
		break;
 80002d6:	bf00      	nop
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000e2 	.word	0x200000e2
 80002e0:	200000e0 	.word	0x200000e0
 80002e4:	200000ed 	.word	0x200000ed
 80002e8:	200000e1 	.word	0x200000e1
 80002ec:	2000010c 	.word	0x2000010c

080002f0 <updateBuffer>:

void updateBuffer(uint8_t updated) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	uint8_t * newLine = (uint8_t *)"\r\n";
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <updateBuffer+0x74>)
 80002fc:	60fb      	str	r3, [r7, #12]
	if(updated == *newLine) {
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	429a      	cmp	r2, r3
 8000306:	d10e      	bne.n	8000326 <updateBuffer+0x36>
		isRST = isRSTCmd();
 8000308:	f000 f858 	bl	80003bc <isRSTCmd>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <updateBuffer+0x78>)
 8000312:	701a      	strb	r2, [r3, #0]
		isOK = isOKCmd();
 8000314:	f000 f86c 	bl	80003f0 <isOKCmd>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <updateBuffer+0x7c>)
 800031e:	701a      	strb	r2, [r3, #0]
		clearBuffer();
 8000320:	f000 f82e 	bl	8000380 <clearBuffer>
 8000324:	e017      	b.n	8000356 <updateBuffer+0x66>
	}
	else {
		buffer[buffer_index] = updated;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <updateBuffer+0x80>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	4619      	mov	r1, r3
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <updateBuffer+0x84>)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	5453      	strb	r3, [r2, r1]
		buffer_index = (buffer_index + 1) % MAX_BUFFER_SIZE;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <updateBuffer+0x80>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <updateBuffer+0x88>)
 800033a:	fb83 1302 	smull	r1, r3, r3, r2
 800033e:	4413      	add	r3, r2
 8000340:	1119      	asrs	r1, r3, #4
 8000342:	17d3      	asrs	r3, r2, #31
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	460b      	mov	r3, r1
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	1a5b      	subs	r3, r3, r1
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	1ad1      	subs	r1, r2, r3
 8000350:	b2ca      	uxtb	r2, r1
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <updateBuffer+0x80>)
 8000354:	701a      	strb	r2, [r3, #0]
	}
	string_buffer = (char *)buffer;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <updateBuffer+0x8c>)
 8000358:	4a06      	ldr	r2, [pc, #24]	; (8000374 <updateBuffer+0x84>)
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08003f20 	.word	0x08003f20
 8000368:	200000e0 	.word	0x200000e0
 800036c:	200000e1 	.word	0x200000e1
 8000370:	200000da 	.word	0x200000da
 8000374:	200000bc 	.word	0x200000bc
 8000378:	88888889 	.word	0x88888889
 800037c:	200000dc 	.word	0x200000dc

08000380 <clearBuffer>:

void clearBuffer(void) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
	for(uint8_t index = 0; index < buffer_index; index++) {
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e006      	b.n	800039a <clearBuffer+0x1a>
		buffer[index] = 0;
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <clearBuffer+0x34>)
 8000390:	2100      	movs	r1, #0
 8000392:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < buffer_index; index++) {
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	3301      	adds	r3, #1
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <clearBuffer+0x38>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d3f3      	bcc.n	800038c <clearBuffer+0xc>
	}
	buffer_index = 0;
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <clearBuffer+0x38>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	200000bc 	.word	0x200000bc
 80003b8:	200000da 	.word	0x200000da

080003bc <isRSTCmd>:

uint8_t isRSTCmd(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	char * requestCmd = (char *)"!RST#";
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <isRSTCmd+0x2c>)
 80003c4:	607b      	str	r3, [r7, #4]
	if(strcmp(string_buffer, requestCmd) == 0) {
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <isRSTCmd+0x30>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff febd 	bl	800014c <strcmp>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <isRSTCmd+0x20>
		return 1;
 80003d8:	2301      	movs	r3, #1
 80003da:	e000      	b.n	80003de <isRSTCmd+0x22>
	}
	return 0;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	08003f24 	.word	0x08003f24
 80003ec:	200000dc 	.word	0x200000dc

080003f0 <isOKCmd>:

uint8_t isOKCmd(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
	char * stopCmd = (char *)"!OK#";
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <isOKCmd+0x2c>)
 80003f8:	607b      	str	r3, [r7, #4]
	if(strcmp(string_buffer, stopCmd) == 0) {
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <isOKCmd+0x30>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6879      	ldr	r1, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff fea3 	bl	800014c <strcmp>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d101      	bne.n	8000410 <isOKCmd+0x20>
		return 1;
 800040c:	2301      	movs	r3, #1
 800040e:	e000      	b.n	8000412 <isOKCmd+0x22>
	}
	return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	08003f2c 	.word	0x08003f2c
 8000420:	200000dc 	.word	0x200000dc

08000424 <led_blinky_fsm>:
 */


#include "debug_led.h"

void led_blinky_fsm(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	switch(ledState) {
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <led_blinky_fsm+0x40>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <led_blinky_fsm+0x12>
 8000430:	2b01      	cmp	r3, #1
 8000432:	d007      	beq.n	8000444 <led_blinky_fsm+0x20>
			setTimer1(LED_PERIOD);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}
		break;
	}
}
 8000434:	e013      	b.n	800045e <led_blinky_fsm+0x3a>
		setTimer1(SYSTEM_DELAY);
 8000436:	200a      	movs	r0, #10
 8000438:	f000 f974 	bl	8000724 <setTimer1>
		ledState = LED_BLINKING;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <led_blinky_fsm+0x40>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		break;
 8000442:	e00c      	b.n	800045e <led_blinky_fsm+0x3a>
		if(timer1_flag == 1) {
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <led_blinky_fsm+0x44>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d107      	bne.n	800045c <led_blinky_fsm+0x38>
			setTimer1(LED_PERIOD);
 800044c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000450:	f000 f968 	bl	8000724 <setTimer1>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000454:	2120      	movs	r1, #32
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <led_blinky_fsm+0x48>)
 8000458:	f001 faa4 	bl	80019a4 <HAL_GPIO_TogglePin>
		break;
 800045c:	bf00      	nop
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000e4 	.word	0x200000e4
 8000468:	200000fc 	.word	0x200000fc
 800046c:	40010800 	.word	0x40010800

08000470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_GPIO_Init+0x5c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <MX_GPIO_Init+0x5c>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_GPIO_Init+0x5c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2120      	movs	r1, #32
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0x60>)
 80004a2:	f001 fa67 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004a6:	2320      	movs	r3, #32
 80004a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_GPIO_Init+0x60>)
 80004be:	f001 f8dd 	bl	800167c <HAL_GPIO_Init>

}
 80004c2:	bf00      	nop
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fb8a 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f834 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f7ff ffc6 	bl	8000470 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e4:	f7ff fe3c 	bl	8000160 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fae0 	bl	8000aac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ec:	f000 fa6e 	bl	80009cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <main+0x5c>)
 80004f2:	f001 ff91 	bl	8002418 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x60>)
 80004f8:	f000 fcb4 	bl	8000e64 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <main+0x64>)
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x68>)
 8000502:	f002 fbfc 	bl	8002cfe <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	led_blinky_fsm();
 8000506:	f7ff ff8d 	bl	8000424 <led_blinky_fsm>
	if(buffer_flag == 1) {
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x6c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d104      	bne.n	800051c <main+0x48>
		buffer_flag = 0;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x6c>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
		command_parser_fsm();
 8000518:	f7ff fe9c 	bl	8000254 <command_parser_fsm>
	}
	if(timer3_flag == 1) {
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <main+0x70>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d101      	bne.n	8000528 <main+0x54>
		command_parser_fsm();
 8000524:	f7ff fe96 	bl	8000254 <command_parser_fsm>
	}
	uart_communication_fsm();
 8000528:	f000 f896 	bl	8000658 <uart_communication_fsm>
	led_blinky_fsm();
 800052c:	e7eb      	b.n	8000506 <main+0x32>
 800052e:	bf00      	nop
 8000530:	20000114 	.word	0x20000114
 8000534:	2000008c 	.word	0x2000008c
 8000538:	200000e5 	.word	0x200000e5
 800053c:	2000015c 	.word	0x2000015c
 8000540:	200000ec 	.word	0x200000ec
 8000544:	2000010c 	.word	0x2000010c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f854 	bl	8003604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fa23 	bl	80019d8 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000598:	f000 f858 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fc90 	bl	8001edc <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005c2:	f000 f843 	bl	800064c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005c6:	2302      	movs	r3, #2
 80005c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fe1b 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005dc:	f000 f836 	bl	800064c <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    timerRun();
 80005f0:	f000 f8ec 	bl	80007cc <timerRun>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_UART_RxCpltCallback+0x40>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d112      	bne.n	8000634 <HAL_UART_RxCpltCallback+0x38>
		updateBuffer(temp);
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_UART_RxCpltCallback+0x44>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fe6c 	bl	80002f0 <updateBuffer>
		buffer_flag = 1;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_UART_RxCpltCallback+0x48>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2 , &temp ,1 ,50);
 800061e:	2332      	movs	r3, #50	; 0x32
 8000620:	2201      	movs	r2, #1
 8000622:	4907      	ldr	r1, [pc, #28]	; (8000640 <HAL_UART_RxCpltCallback+0x44>)
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <HAL_UART_RxCpltCallback+0x4c>)
 8000626:	f002 fad8 	bl	8002bda <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2 , &temp ,1);
 800062a:	2201      	movs	r2, #1
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <HAL_UART_RxCpltCallback+0x44>)
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_UART_RxCpltCallback+0x4c>)
 8000630:	f002 fb65 	bl	8002cfe <HAL_UART_Receive_IT>
	}
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40004400 	.word	0x40004400
 8000640:	200000e5 	.word	0x200000e5
 8000644:	200000ec 	.word	0x200000ec
 8000648:	2000015c 	.word	0x2000015c

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <uart_communication_fsm>:
 */


#include "sensor_reader.h"

void uart_communication_fsm(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(readerState) {
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <uart_communication_fsm+0x74>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d01b      	beq.n	800069c <uart_communication_fsm+0x44>
 8000664:	2b02      	cmp	r3, #2
 8000666:	dc2e      	bgt.n	80006c6 <uart_communication_fsm+0x6e>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <uart_communication_fsm+0x1a>
 800066c:	2b01      	cmp	r3, #1
 800066e:	d007      	beq.n	8000680 <uart_communication_fsm+0x28>
			setTimer2(SENSOR_READ_PERIOD);
			readSensor();
		}
		break;
	}
}
 8000670:	e029      	b.n	80006c6 <uart_communication_fsm+0x6e>
		setTimer2(SYSTEM_DELAY);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 f872 	bl	800075c <setTimer2>
		readerState = READER_READING;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <uart_communication_fsm+0x74>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
		break;
 800067e:	e022      	b.n	80006c6 <uart_communication_fsm+0x6e>
		if(printData) {
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <uart_communication_fsm+0x78>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d01b      	beq.n	80006c0 <uart_communication_fsm+0x68>
			setTimer2(SENSOR_READ_PERIOD);
 8000688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068c:	f000 f866 	bl	800075c <setTimer2>
			readSensor();
 8000690:	f000 f822 	bl	80006d8 <readSensor>
			readerState = READER_READING;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <uart_communication_fsm+0x74>)
 8000696:	2202      	movs	r2, #2
 8000698:	701a      	strb	r2, [r3, #0]
		break;
 800069a:	e011      	b.n	80006c0 <uart_communication_fsm+0x68>
		if(!printData) {
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <uart_communication_fsm+0x78>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <uart_communication_fsm+0x52>
			readerState = READER_WAITING;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <uart_communication_fsm+0x74>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
		if(timer2_flag == 1) {
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <uart_communication_fsm+0x7c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d108      	bne.n	80006c4 <uart_communication_fsm+0x6c>
			setTimer2(SENSOR_READ_PERIOD);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 f851 	bl	800075c <setTimer2>
			readSensor();
 80006ba:	f000 f80d 	bl	80006d8 <readSensor>
		break;
 80006be:	e001      	b.n	80006c4 <uart_communication_fsm+0x6c>
		break;
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <uart_communication_fsm+0x6e>
		break;
 80006c4:	bf00      	nop
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000e3 	.word	0x200000e3
 80006d0:	200000ed 	.word	0x200000ed
 80006d4:	20000104 	.word	0x20000104

080006d8 <readSensor>:

void readSensor(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	char * str = (char *)'0';
 80006de:	2330      	movs	r3, #48	; 0x30
 80006e0:	607b      	str	r3, [r7, #4]
	ADC_value = HAL_ADC_GetValue(&hadc1);
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <readSensor+0x3c>)
 80006e4:	f000 fc6c 	bl	8000fc0 <HAL_ADC_GetValue>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <readSensor+0x40>)
 80006ec:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!ADC=%ld\r\n", ADC_value), 1000);
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <readSensor+0x40>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4909      	ldr	r1, [pc, #36]	; (800071c <readSensor+0x44>)
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f002 ff8c 	bl	8003614 <siprintf>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <readSensor+0x48>)
 8000708:	f002 fa67 	bl	8002bda <HAL_UART_Transmit>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000008c 	.word	0x2000008c
 8000718:	200000e8 	.word	0x200000e8
 800071c:	08003f34 	.word	0x08003f34
 8000720:	2000015c 	.word	0x2000015c

08000724 <setTimer1>:
		traffic_timer_counter= duration / SYSTEM_DELAY;
	} else traffic_timer_counter = duration;
	traffic_timer_flag = 0;
}

void setTimer1(int duration) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <setTimer1+0x2c>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1092      	asrs	r2, r2, #2
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <setTimer1+0x30>)
 800073c:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <setTimer1+0x34>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	66666667 	.word	0x66666667
 8000754:	200000f8 	.word	0x200000f8
 8000758:	200000fc 	.word	0x200000fc

0800075c <setTimer2>:

void setTimer2(int duration) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <setTimer2+0x2c>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	1092      	asrs	r2, r2, #2
 800076e:	17db      	asrs	r3, r3, #31
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <setTimer2+0x30>)
 8000774:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <setTimer2+0x34>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	66666667 	.word	0x66666667
 800078c:	20000100 	.word	0x20000100
 8000790:	20000104 	.word	0x20000104

08000794 <setTimer3>:


void setTimer3(int duration) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer3_counter = duration / SYSTEM_DELAY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <setTimer3+0x2c>)
 80007a0:	fb82 1203 	smull	r1, r2, r2, r3
 80007a4:	1092      	asrs	r2, r2, #2
 80007a6:	17db      	asrs	r3, r3, #31
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <setTimer3+0x30>)
 80007ac:	6013      	str	r3, [r2, #0]
	} else timer3_counter = duration;
	timer3_flag = 0;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <setTimer3+0x34>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	66666667 	.word	0x66666667
 80007c4:	20000108 	.word	0x20000108
 80007c8:	2000010c 	.word	0x2000010c

080007cc <timerRun>:

void timerRun(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	if(traffic_timer_counter > 0) {
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <timerRun+0x8c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dd0b      	ble.n	80007f0 <timerRun+0x24>
		traffic_timer_counter--;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <timerRun+0x8c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <timerRun+0x8c>)
 80007e0:	6013      	str	r3, [r2, #0]
		if(traffic_timer_counter <= 0) {
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <timerRun+0x8c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dc02      	bgt.n	80007f0 <timerRun+0x24>
			traffic_timer_flag = 1;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <timerRun+0x90>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0) {
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <timerRun+0x94>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dd0b      	ble.n	8000810 <timerRun+0x44>
		timer1_counter--;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <timerRun+0x94>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <timerRun+0x94>)
 8000800:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <timerRun+0x94>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dc02      	bgt.n	8000810 <timerRun+0x44>
			timer1_flag = 1;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <timerRun+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <timerRun+0x9c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dd0b      	ble.n	8000830 <timerRun+0x64>
		timer2_counter--;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <timerRun+0x9c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <timerRun+0x9c>)
 8000820:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <timerRun+0x9c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	dc02      	bgt.n	8000830 <timerRun+0x64>
			timer2_flag = 1;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <timerRun+0xa0>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <timerRun+0xa4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dd0b      	ble.n	8000850 <timerRun+0x84>
		timer3_counter--;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <timerRun+0xa4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <timerRun+0xa4>)
 8000840:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <timerRun+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	dc02      	bgt.n	8000850 <timerRun+0x84>
			timer3_flag = 1;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <timerRun+0xa8>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200000f4 	.word	0x200000f4
 800085c:	200000f0 	.word	0x200000f0
 8000860:	200000f8 	.word	0x200000f8
 8000864:	200000fc 	.word	0x200000fc
 8000868:	20000100 	.word	0x20000100
 800086c:	20000104 	.word	0x20000104
 8000870:	20000108 	.word	0x20000108
 8000874:	2000010c 	.word	0x2000010c

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_MspInit+0x5c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x5c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_MspInit+0x60>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_MspInit+0x60>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f9ab 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM2_IRQHandler+0x10>)
 8000932:	f001 fdbd 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000114 	.word	0x20000114

08000940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <USART2_IRQHandler+0x10>)
 8000946:	f002 fa0b 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000015c 	.word	0x2000015c

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f002 fe14 	bl	80035b0 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20002800 	.word	0x20002800
 80009b4:	00000400 	.word	0x00000400
 80009b8:	20000110 	.word	0x20000110
 80009bc:	200001b8 	.word	0x200001b8

080009c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a00:	2209      	movs	r2, #9
 8000a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a12:	f001 fcb1 	bl	8002378 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a1c:	f7ff fe16 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a2e:	f001 fe47 	bl	80026c0 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a38:	f7ff fe08 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a4a:	f002 f80f 	bl	8002a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f7ff fdfa 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000114 	.word	0x20000114

08000a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a74:	d113      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	201c      	movs	r0, #28
 8000a94:	f000 fd0b 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a98:	201c      	movs	r0, #28
 8000a9a:	f000 fd24 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART2_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f002 f82c 	bl	8002b40 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f7ff fdad 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000015c 	.word	0x2000015c
 8000afc:	40004400 	.word	0x40004400

08000b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <HAL_UART_MspInit+0x98>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d137      	bne.n	8000b90 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2a:	61d3      	str	r3, [r2, #28]
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x9c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b50:	2304      	movs	r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <HAL_UART_MspInit+0xa0>)
 8000b64:	f000 fd8a 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <HAL_UART_MspInit+0xa0>)
 8000b7c:	f000 fd7e 	bl	800167c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2026      	movs	r0, #38	; 0x26
 8000b86:	f000 fc92 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f000 fcab 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bca:	f7ff fef9 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 fcf5 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fc7f 	bl	80004d4 <main>
  bx lr
 8000bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be0:	08003fa4 	.word	0x08003fa4
  ldr r2, =_sbss
 8000be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000be8:	200001b4 	.word	0x200001b4

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x28>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x28>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 fc49 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe34 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fc61 	bl	8001502 <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 fc29 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x1c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x20>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x20>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	200001a0 	.word	0x200001a0

08000ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <HAL_GetTick+0x10>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	200001a0 	.word	0x200001a0

08000cb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0be      	b.n	8000e54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d109      	bne.n	8000cf8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fa72 	bl	80001dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fabf 	bl	800127c <ADC_ConversionStop_Disable>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8099 	bne.w	8000e42 <HAL_ADC_Init+0x18e>
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8095 	bne.w	8000e42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d20:	f023 0302 	bic.w	r3, r3, #2
 8000d24:	f043 0202 	orr.w	r2, r3, #2
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4c:	d003      	beq.n	8000d56 <HAL_ADC_Init+0xa2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <HAL_ADC_Init+0xa8>
 8000d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5a:	e000      	b.n	8000d5e <HAL_ADC_Init+0xaa>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7d1b      	ldrb	r3, [r3, #20]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d119      	bne.n	8000da0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	035a      	lsls	r2, r3, #13
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	e00b      	b.n	8000da0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f043 0220 	orr.w	r2, r3, #32
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	f043 0201 	orr.w	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_ADC_Init+0x1a8>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_Init+0x126>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d104      	bne.n	8000de4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_ADC_Init+0x1ac>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d10b      	bne.n	8000e20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f023 0303 	bic.w	r3, r3, #3
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e1e:	e018      	b.n	8000e52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f023 0312 	bic.w	r3, r3, #18
 8000e28:	f043 0210 	orr.w	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e40:	e007      	b.n	8000e52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e60:	ff1f0efe 	.word	0xff1f0efe

08000e64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Start+0x1a>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e098      	b.n	8000fb0 <HAL_ADC_Start+0x14c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f99e 	bl	80011c8 <ADC_Enable>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f040 8087 	bne.w	8000fa6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <HAL_ADC_Start+0x154>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d105      	bne.n	8000ec2 <HAL_ADC_Start+0x5e>
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_ADC_Start+0x158>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d115      	bne.n	8000eee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d026      	beq.n	8000f2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eec:	e01d      	b.n	8000f2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <HAL_ADC_Start+0x158>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d004      	beq.n	8000f0e <HAL_ADC_Start+0xaa>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <HAL_ADC_Start+0x154>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10d      	bne.n	8000f2a <HAL_ADC_Start+0xc6>
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_ADC_Start+0x158>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	f023 0206 	bic.w	r2, r3, #6
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f42:	e002      	b.n	8000f4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f06f 0202 	mvn.w	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f6a:	d113      	bne.n	8000f94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_ADC_Start+0x154>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_ADC_Start+0x158>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d108      	bne.n	8000f94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	e00c      	b.n	8000fae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	e003      	b.n	8000fae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012800 	.word	0x40012800
 8000fbc:	40012400 	.word	0x40012400

08000fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x20>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e0dc      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x1da>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b06      	cmp	r3, #6
 8001006:	d81c      	bhi.n	8001042 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	3b05      	subs	r3, #5
 800101a:	221f      	movs	r2, #31
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	4019      	ands	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	3b05      	subs	r3, #5
 8001034:	fa00 f203 	lsl.w	r2, r0, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
 8001040:	e03c      	b.n	80010bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d81c      	bhi.n	8001084 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b23      	subs	r3, #35	; 0x23
 800105c:	221f      	movs	r2, #31
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	4019      	ands	r1, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b23      	subs	r3, #35	; 0x23
 8001076:	fa00 f203 	lsl.w	r2, r0, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	e01b      	b.n	80010bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	3b41      	subs	r3, #65	; 0x41
 8001096:	221f      	movs	r2, #31
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	3b41      	subs	r3, #65	; 0x41
 80010b0:	fa00 f203 	lsl.w	r2, r0, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d91c      	bls.n	80010fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	3b1e      	subs	r3, #30
 80010d6:	2207      	movs	r2, #7
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	4019      	ands	r1, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	6898      	ldr	r0, [r3, #8]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	3b1e      	subs	r3, #30
 80010f0:	fa00 f203 	lsl.w	r2, r0, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	e019      	b.n	8001132 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6919      	ldr	r1, [r3, #16]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	2207      	movs	r2, #7
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6898      	ldr	r0, [r3, #8]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	fa00 f203 	lsl.w	r2, r0, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b10      	cmp	r3, #16
 8001138:	d003      	beq.n	8001142 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800113e:	2b11      	cmp	r3, #17
 8001140:	d132      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d125      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d126      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001168:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b10      	cmp	r3, #16
 8001170:	d11a      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0c9a      	lsrs	r2, r3, #18
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001188:	e002      	b.n	8001190 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3b01      	subs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <HAL_ADC_ConfigChannel+0x1b2>
 8001196:	e007      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f043 0220 	orr.w	r2, r3, #32
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40012400 	.word	0x40012400
 80011c0:	20000000 	.word	0x20000000
 80011c4:	431bde83 	.word	0x431bde83

080011c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d040      	beq.n	8001268 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0201 	orr.w	r2, r2, #1
 80011f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <ADC_Enable+0xac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <ADC_Enable+0xb0>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001204:	e002      	b.n	800120c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3b01      	subs	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f9      	bne.n	8001206 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001212:	f7ff fd45 	bl	8000ca0 <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001218:	e01f      	b.n	800125a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800121a:	f7ff fd41 	bl	8000ca0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d918      	bls.n	800125a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d011      	beq.n	800125a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	f043 0210 	orr.w	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d1d8      	bne.n	800121a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83

0800127c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b01      	cmp	r3, #1
 8001294:	d12e      	bne.n	80012f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a6:	f7ff fcfb 	bl	8000ca0 <HAL_GetTick>
 80012aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ac:	e01b      	b.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ae:	f7ff fcf7 	bl	8000ca0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d914      	bls.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10d      	bne.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f043 0210 	orr.w	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e007      	b.n	80012f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d0dc      	beq.n	80012ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4906      	ldr	r1, [pc, #24]	; (8001398 <__NVIC_EnableIRQ+0x34>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff90 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff2d 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff42 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff35 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e020      	b.n	8001584 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 020e 	bic.w	r2, r2, #14
 8001550:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2204      	movs	r2, #4
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e051      	b.n	8001656 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_DMA_Abort_IT+0xd0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d029      	beq.n	8001630 <HAL_DMA_Abort_IT+0xa0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_DMA_Abort_IT+0xd4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_DMA_Abort_IT+0x9c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_DMA_Abort_IT+0xd8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01a      	beq.n	8001626 <HAL_DMA_Abort_IT+0x96>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DMA_Abort_IT+0xdc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_Abort_IT+0x90>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_DMA_Abort_IT+0xe0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00a      	beq.n	800161a <HAL_DMA_Abort_IT+0x8a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_DMA_Abort_IT+0xe4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d102      	bne.n	8001614 <HAL_DMA_Abort_IT+0x84>
 800160e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001612:	e00e      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001618:	e00b      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 800161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161e:	e008      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	e005      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	e002      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 800162c:	2310      	movs	r3, #16
 800162e:	e000      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001630:	2301      	movs	r3, #1
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_DMA_Abort_IT+0xe8>)
 8001634:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    } 
  }
  return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40020008 	.word	0x40020008
 8001664:	4002001c 	.word	0x4002001c
 8001668:	40020030 	.word	0x40020030
 800166c:	40020044 	.word	0x40020044
 8001670:	40020058 	.word	0x40020058
 8001674:	4002006c 	.word	0x4002006c
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e161      	b.n	8001954 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8150 	bne.w	800194e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a97      	ldr	r2, [pc, #604]	; (8001910 <HAL_GPIO_Init+0x294>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4a95      	ldr	r2, [pc, #596]	; (8001910 <HAL_GPIO_Init+0x294>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4a95      	ldr	r2, [pc, #596]	; (8001914 <HAL_GPIO_Init+0x298>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a93      	ldr	r2, [pc, #588]	; (8001914 <HAL_GPIO_Init+0x298>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a93      	ldr	r2, [pc, #588]	; (8001918 <HAL_GPIO_Init+0x29c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a91      	ldr	r2, [pc, #580]	; (8001918 <HAL_GPIO_Init+0x29c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a91      	ldr	r2, [pc, #580]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a8f      	ldr	r2, [pc, #572]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a8f      	ldr	r2, [pc, #572]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a8d      	ldr	r2, [pc, #564]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a76      	ldr	r2, [pc, #472]	; (8001924 <HAL_GPIO_Init+0x2a8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80a9 	beq.w	800194e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a49      	ldr	r2, [pc, #292]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_GPIO_Init+0x2b0>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <HAL_GPIO_Init+0x2b4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1dc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1d8>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001854:	2303      	movs	r3, #3
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186e:	492f      	ldr	r1, [pc, #188]	; (800192c <HAL_GPIO_Init+0x2b0>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_GPIO_Init+0x2c0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	492b      	ldr	r1, [pc, #172]	; (800193c <HAL_GPIO_Init+0x2c0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_GPIO_Init+0x2c0>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4927      	ldr	r1, [pc, #156]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4921      	ldr	r1, [pc, #132]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	491d      	ldr	r1, [pc, #116]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4917      	ldr	r1, [pc, #92]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4913      	ldr	r1, [pc, #76]	; (800193c <HAL_GPIO_Init+0x2c0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01f      	beq.n	8001940 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_GPIO_Init+0x2c0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	490d      	ldr	r1, [pc, #52]	; (800193c <HAL_GPIO_Init+0x2c0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e01f      	b.n	800194e <HAL_GPIO_Init+0x2d2>
 800190e:	bf00      	nop
 8001910:	10320000 	.word	0x10320000
 8001914:	10310000 	.word	0x10310000
 8001918:	10220000 	.word	0x10220000
 800191c:	10210000 	.word	0x10210000
 8001920:	10120000 	.word	0x10120000
 8001924:	10110000 	.word	0x10110000
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	40010800 	.word	0x40010800
 8001934:	40010c00 	.word	0x40010c00
 8001938:	40011000 	.word	0x40011000
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_Init+0x2f4>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_GPIO_Init+0x2f4>)
 800194a:	4013      	ands	r3, r2
 800194c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae96 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43d9      	mvns	r1, r3
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	400b      	ands	r3, r1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e272      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f8:	4b92      	ldr	r3, [pc, #584]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d00c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a04:	4b8f      	ldr	r3, [pc, #572]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
 8001a10:	4b8c      	ldr	r3, [pc, #560]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d10b      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d06c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x12c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d168      	bne.n	8001b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e24c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x76>
 8001a40:	4b80      	ldr	r3, [pc, #512]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7f      	ldr	r2, [pc, #508]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e02e      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x98>
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b78      	ldr	r3, [pc, #480]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0xbc>
 8001a7a:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a71      	ldr	r2, [pc, #452]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a94:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a67      	ldr	r2, [pc, #412]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f8f4 	bl	8000ca0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff f8f0 	bl	8000ca0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e200      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xe4>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f8e0 	bl	8000ca0 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f8dc 	bl	8000ca0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1ec      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x10c>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c0      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4939      	ldr	r1, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f895 	bl	8000ca0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f891 	bl	8000ca0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4927      	ldr	r1, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f874 	bl	8000ca0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f870 	bl	8000ca0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e180      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f854 	bl	8000ca0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f850 	bl	8000ca0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e160      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fad8 	bl	80021d0 <RCC_Delay>
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff f83a 	bl	8000ca0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff f836 	bl	8000ca0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e146      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	42420000 	.word	0x42420000
 8001c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e9      	bne.n	8001c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a6 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b88      	ldr	r3, [pc, #544]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a87      	ldr	r2, [pc, #540]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b85      	ldr	r3, [pc, #532]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fff7 	bl	8000ca0 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7fe fff3 	bl	8000ca0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e103      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x312>
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a6e      	ldr	r2, [pc, #440]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x334>
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a69      	ldr	r2, [pc, #420]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a66      	ldr	r2, [pc, #408]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x356>
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a60      	ldr	r2, [pc, #384]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a5d      	ldr	r2, [pc, #372]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a5a      	ldr	r2, [pc, #360]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ffa7 	bl	8000ca0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe ffa3 	bl	8000ca0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0b1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x37e>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7fe ff91 	bl	8000ca0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe ff8d 	bl	8000ca0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e09b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d061      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d146      	bne.n	8001e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe ff61 	bl	8000ca0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe ff5d 	bl	8000ca0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e06d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4921      	ldr	r1, [pc, #132]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a19      	ldr	r1, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff31 	bl	8000ca0 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe ff2d 	bl	8000ca0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e03d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46a>
 8001e60:	e035      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe ff1a 	bl	8000ca0 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe ff16 	bl	8000ca0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
 8001e8e:	e01e      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e019      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x500>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d0      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4965      	ldr	r1, [pc, #404]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e073      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4936      	ldr	r1, [pc, #216]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fe68 	bl	8000ca0 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7fe fe64 	bl	8000ca0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e053      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1d0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fdc6 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003f50 	.word	0x08003f50
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b490      	push	{r4, r7}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_GetSysClockFreq+0xac>)
 80020b8:	1d3c      	adds	r4, r7, #4
 80020ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020c0:	f240 2301 	movw	r3, #513	; 0x201
 80020c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x46>
 80020ee:	e02b      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	623b      	str	r3, [r7, #32]
      break;
 80020f4:	e02b      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3328      	adds	r3, #40	; 0x28
 8002100:	443b      	add	r3, r7
 8002102:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002106:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0c5b      	lsrs	r3, r3, #17
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	3328      	adds	r3, #40	; 0x28
 800211e:	443b      	add	r3, r7
 8002120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb4>)
 800212a:	fb03 f202 	mul.w	r2, r3, r2
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	e004      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	623b      	str	r3, [r7, #32]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb4>)
 800214a:	623b      	str	r3, [r7, #32]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6a3b      	ldr	r3, [r7, #32]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc90      	pop	{r4, r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	08003f40 	.word	0x08003f40
 8002160:	40021000 	.word	0x40021000
 8002164:	007a1200 	.word	0x007a1200
 8002168:	003d0900 	.word	0x003d0900

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff2 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003f60 	.word	0x08003f60

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffde 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08003f60 	.word	0x08003f60

080021d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <RCC_Delay+0x34>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <RCC_Delay+0x38>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ec:	bf00      	nop
  }
  while (Delay --);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	60fa      	str	r2, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <RCC_Delay+0x1c>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000000 	.word	0x20000000
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d07d      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	61d3      	str	r3, [r2, #28]
 8002244:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d118      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002260:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226c:	f7fe fd18 	bl	8000ca0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe fd14 	bl	8000ca0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e06d      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d02e      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d027      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022c6:	4a29      	ldr	r2, [pc, #164]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fce3 	bl	8000ca0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fcdf 	bl	8000ca0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e036      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ee      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4917      	ldr	r1, [pc, #92]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	4313      	orrs	r3, r2
 8002310:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	490b      	ldr	r1, [pc, #44]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	42420440 	.word	0x42420440

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fb60 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fa6a 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e035      	b.n	800249c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_TIM_Base_Start_IT+0x90>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_TIM_Base_Start_IT+0x4e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d004      	beq.n	8002466 <HAL_TIM_Base_Start_IT+0x4e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_Base_Start_IT+0x94>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d111      	bne.n	800248a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b06      	cmp	r3, #6
 8002476:	d010      	beq.n	800249a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	e007      	b.n	800249a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40000400 	.word	0x40000400

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9b1 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9a4 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f9b3 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0204 	mvn.w	r2, #4
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f987 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f97a 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f989 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f95d 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f950 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f95f 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f933 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f926 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f935 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0201 	mvn.w	r2, #1
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fd ffda 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa67 	bl	8002b2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8f9 	bl	800287e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0220 	mvn.w	r2, #32
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa32 	bl	8002b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_TIM_ConfigClockSource+0x18>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0b3      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x180>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002710:	d03e      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0xd0>
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	f200 8087 	bhi.w	8002828 <HAL_TIM_ConfigClockSource+0x168>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	f000 8085 	beq.w	800282c <HAL_TIM_ConfigClockSource+0x16c>
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	d87f      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002728:	2b70      	cmp	r3, #112	; 0x70
 800272a:	d01a      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0xa2>
 800272c:	2b70      	cmp	r3, #112	; 0x70
 800272e:	d87b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002730:	2b60      	cmp	r3, #96	; 0x60
 8002732:	d050      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x116>
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d877      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002738:	2b50      	cmp	r3, #80	; 0x50
 800273a:	d03c      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xf6>
 800273c:	2b50      	cmp	r3, #80	; 0x50
 800273e:	d873      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d058      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x136>
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d86f      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d064      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x156>
 800274c:	2b30      	cmp	r3, #48	; 0x30
 800274e:	d86b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d060      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x156>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d867      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05c      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x156>
 800275c:	2b10      	cmp	r3, #16
 800275e:	d05a      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002760:	e062      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f000 f95c 	bl	8002a2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002784:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
      break;
 800278e:	e04e      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f000 f945 	bl	8002a2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b2:	609a      	str	r2, [r3, #8]
      break;
 80027b4:	e03b      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 f8bc 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2150      	movs	r1, #80	; 0x50
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f913 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027d4:	e02b      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 f8da 	bl	800299c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2160      	movs	r1, #96	; 0x60
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f903 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027f4:	e01b      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f89c 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2140      	movs	r1, #64	; 0x40
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f8f3 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 8002814:	e00b      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f000 f8ea 	bl	80029fa <TIM_ITRx_SetConfig>
        break;
 8002826:	e002      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800282c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <TIM_Base_SetConfig+0xa8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x28>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x28>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <TIM_Base_SetConfig+0xac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <TIM_Base_SetConfig+0xa8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x52>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x52>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a17      	ldr	r2, [pc, #92]	; (800293c <TIM_Base_SetConfig+0xac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <TIM_Base_SetConfig+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400

08002940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f023 0201 	bic.w	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 030a 	bic.w	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 0210 	bic.w	r2, r3, #16
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	621a      	str	r2, [r3, #32]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f043 0307 	orr.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b087      	sub	sp, #28
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e041      	b.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d004      	beq.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10c      	bne.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40000400 	.word	0x40000400

08002b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e03f      	b.n	8002bd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd ffca 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fc85 	bl	8003494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b08a      	sub	sp, #40	; 0x28
 8002bde:	af02      	add	r7, sp, #8
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d17c      	bne.n	8002cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_UART_Transmit+0x2c>
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e075      	b.n	8002cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_UART_Transmit+0x3e>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e06e      	b.n	8002cf6 <HAL_UART_Transmit+0x11c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2221      	movs	r2, #33	; 0x21
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe f837 	bl	8000ca0 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c48:	d108      	bne.n	8002c5c <HAL_UART_Transmit+0x82>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e003      	b.n	8002c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c6c:	e02a      	b.n	8002cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fa38 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e036      	b.n	8002cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e007      	b.n	8002cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1cf      	bne.n	8002c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa08 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e006      	b.n	8002cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d11d      	bne.n	8002d54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Receive_IT+0x26>
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e016      	b.n	8002d56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Receive_IT+0x38>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00f      	b.n	8002d56 <HAL_UART_Receive_IT+0x58>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa19 	bl	8003182 <UART_Start_Receive_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fac9 	bl	8003342 <UART_Receive_IT>
      return;
 8002db0:	e17b      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b1 	beq.w	8002f1c <HAL_UART_IRQHandler+0x1bc>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x70>
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00f      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_UART_IRQHandler+0xee>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 811e 	beq.w	80030a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_UART_IRQHandler+0x11e>
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa62 	bl	8003342 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x146>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d031      	beq.n	8002f0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9a4 	bl	80031f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d023      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	4a76      	ldr	r2, [pc, #472]	; (80030b0 <HAL_UART_IRQHandler+0x350>)
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fb56 	bl	8001590 <HAL_DMA_Abort_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e00e      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8e3 	bl	80030c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e00a      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8df 	bl	80030c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	e006      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8db 	bl	80030c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f16:	e0c3      	b.n	80030a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	bf00      	nop
    return;
 8002f1a:	e0c1      	b.n	80030a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 80a1 	bne.w	8003068 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 809b 	beq.w	8003068 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8095 	beq.w	8003068 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d04e      	beq.n	8003000 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f6c:	8a3b      	ldrh	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8098 	beq.w	80030a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f78:	8a3a      	ldrh	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f080 8092 	bcs.w	80030a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8a3a      	ldrh	r2, [r7, #16]
 8002f84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d02b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0210 	bic.w	r2, r2, #16
 8002fdc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fa99 	bl	800151a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f86d 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ffe:	e051      	b.n	80030a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003008:	b29b      	uxth	r3, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d047      	beq.n	80030a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003018:	8a7b      	ldrh	r3, [r7, #18]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d044      	beq.n	80030a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800302c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0210 	bic.w	r2, r2, #16
 800305a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800305c:	8a7b      	ldrh	r3, [r7, #18]
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f839 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003066:	e01f      	b.n	80030a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_UART_IRQHandler+0x324>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f8f9 	bl	8003274 <UART_Transmit_IT>
    return;
 8003082:	e012      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_UART_IRQHandler+0x34a>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f93a 	bl	8003312 <UART_EndTransmit_IT>
    return;
 800309e:	e004      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
    return;
 80030a0:	bf00      	nop
 80030a2:	e002      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
      return;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
      return;
 80030a8:	bf00      	nop
  }
}
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800324d 	.word	0x0800324d

080030b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	e02c      	b.n	800315a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d028      	beq.n	800315a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0x30>
 800310e:	f7fd fdc7 	bl	8000ca0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	429a      	cmp	r2, r3
 800311c:	d21d      	bcs.n	800315a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800312c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e00f      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4013      	ands	r3, r2
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	bf0c      	ite	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	2300      	movne	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	429a      	cmp	r2, r3
 8003176:	d0c3      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	4613      	mov	r3, r2
 800318e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2222      	movs	r2, #34	; 0x22
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800320a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff ff2d 	bl	80030c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b21      	cmp	r3, #33	; 0x21
 8003286:	d13e      	bne.n	8003306 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d114      	bne.n	80032bc <UART_Transmit_IT+0x48>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d110      	bne.n	80032bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]
 80032ba:	e008      	b.n	80032ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6211      	str	r1, [r2, #32]
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4619      	mov	r1, r3
 80032dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003300:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff febe 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b22      	cmp	r3, #34	; 0x22
 8003354:	f040 8099 	bne.w	800348a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d117      	bne.n	8003392 <UART_Receive_IT+0x50>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	b29a      	uxth	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	1c9a      	adds	r2, r3, #2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
 8003390:	e026      	b.n	80033e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d007      	beq.n	80033b6 <UART_Receive_IT+0x74>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <UART_Receive_IT+0x82>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e008      	b.n	80033d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4619      	mov	r1, r3
 80033ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d148      	bne.n	8003486 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0220 	bic.w	r2, r2, #32
 8003402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d123      	bne.n	800347c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0210 	bic.w	r2, r2, #16
 8003448:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d10a      	bne.n	800346e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fe2f 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
 800347a:	e002      	b.n	8003482 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd f8bd 	bl	80005fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e002      	b.n	800348c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ce:	f023 030c 	bic.w	r3, r3, #12
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	430b      	orrs	r3, r1
 80034da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <UART_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d103      	bne.n	8003504 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7fe fe54 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	e002      	b.n	800350a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7fe fe3c 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003508:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <UART_SetConfig+0x118>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	0119      	lsls	r1, r3, #4
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <UART_SetConfig+0x118>)
 8003542:	fba3 0302 	umull	r0, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2064      	movs	r0, #100	; 0x64
 800354a:	fb00 f303 	mul.w	r3, r0, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	3332      	adds	r3, #50	; 0x32
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <UART_SetConfig+0x118>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	4419      	add	r1, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <UART_SetConfig+0x118>)
 800357a:	fba3 0302 	umull	r0, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2064      	movs	r0, #100	; 0x64
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a07      	ldr	r2, [pc, #28]	; (80035ac <UART_SetConfig+0x118>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	440a      	add	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013800 	.word	0x40013800
 80035ac:	51eb851f 	.word	0x51eb851f

080035b0 <__errno>:
 80035b0:	4b01      	ldr	r3, [pc, #4]	; (80035b8 <__errno+0x8>)
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4d0c      	ldr	r5, [pc, #48]	; (80035f4 <__libc_init_array+0x38>)
 80035c2:	4c0d      	ldr	r4, [pc, #52]	; (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	f000 fc9c 	bl	8003f08 <_init>
 80035d0:	2600      	movs	r6, #0
 80035d2:	4d0a      	ldr	r5, [pc, #40]	; (80035fc <__libc_init_array+0x40>)
 80035d4:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	08003f9c 	.word	0x08003f9c
 80035f8:	08003f9c 	.word	0x08003f9c
 80035fc:	08003f9c 	.word	0x08003f9c
 8003600:	08003fa0 	.word	0x08003fa0

08003604 <memset>:
 8003604:	4603      	mov	r3, r0
 8003606:	4402      	add	r2, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	d100      	bne.n	800360e <memset+0xa>
 800360c:	4770      	bx	lr
 800360e:	f803 1b01 	strb.w	r1, [r3], #1
 8003612:	e7f9      	b.n	8003608 <memset+0x4>

08003614 <siprintf>:
 8003614:	b40e      	push	{r1, r2, r3}
 8003616:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800361a:	b500      	push	{lr}
 800361c:	b09c      	sub	sp, #112	; 0x70
 800361e:	ab1d      	add	r3, sp, #116	; 0x74
 8003620:	9002      	str	r0, [sp, #8]
 8003622:	9006      	str	r0, [sp, #24]
 8003624:	9107      	str	r1, [sp, #28]
 8003626:	9104      	str	r1, [sp, #16]
 8003628:	4808      	ldr	r0, [pc, #32]	; (800364c <siprintf+0x38>)
 800362a:	4909      	ldr	r1, [pc, #36]	; (8003650 <siprintf+0x3c>)
 800362c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003630:	9105      	str	r1, [sp, #20]
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	a902      	add	r1, sp, #8
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	f000 f868 	bl	800370c <_svfiprintf_r>
 800363c:	2200      	movs	r2, #0
 800363e:	9b02      	ldr	r3, [sp, #8]
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	b01c      	add	sp, #112	; 0x70
 8003644:	f85d eb04 	ldr.w	lr, [sp], #4
 8003648:	b003      	add	sp, #12
 800364a:	4770      	bx	lr
 800364c:	2000000c 	.word	0x2000000c
 8003650:	ffff0208 	.word	0xffff0208

08003654 <__ssputs_r>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	688e      	ldr	r6, [r1, #8]
 800365a:	4682      	mov	sl, r0
 800365c:	429e      	cmp	r6, r3
 800365e:	460c      	mov	r4, r1
 8003660:	4690      	mov	r8, r2
 8003662:	461f      	mov	r7, r3
 8003664:	d838      	bhi.n	80036d8 <__ssputs_r+0x84>
 8003666:	898a      	ldrh	r2, [r1, #12]
 8003668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800366c:	d032      	beq.n	80036d4 <__ssputs_r+0x80>
 800366e:	6825      	ldr	r5, [r4, #0]
 8003670:	6909      	ldr	r1, [r1, #16]
 8003672:	3301      	adds	r3, #1
 8003674:	eba5 0901 	sub.w	r9, r5, r1
 8003678:	6965      	ldr	r5, [r4, #20]
 800367a:	444b      	add	r3, r9
 800367c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003684:	106d      	asrs	r5, r5, #1
 8003686:	429d      	cmp	r5, r3
 8003688:	bf38      	it	cc
 800368a:	461d      	movcc	r5, r3
 800368c:	0553      	lsls	r3, r2, #21
 800368e:	d531      	bpl.n	80036f4 <__ssputs_r+0xa0>
 8003690:	4629      	mov	r1, r5
 8003692:	f000 fb6f 	bl	8003d74 <_malloc_r>
 8003696:	4606      	mov	r6, r0
 8003698:	b950      	cbnz	r0, 80036b0 <__ssputs_r+0x5c>
 800369a:	230c      	movs	r3, #12
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f8ca 3000 	str.w	r3, [sl]
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b0:	464a      	mov	r2, r9
 80036b2:	6921      	ldr	r1, [r4, #16]
 80036b4:	f000 face 	bl	8003c54 <memcpy>
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	6126      	str	r6, [r4, #16]
 80036c6:	444e      	add	r6, r9
 80036c8:	6026      	str	r6, [r4, #0]
 80036ca:	463e      	mov	r6, r7
 80036cc:	6165      	str	r5, [r4, #20]
 80036ce:	eba5 0509 	sub.w	r5, r5, r9
 80036d2:	60a5      	str	r5, [r4, #8]
 80036d4:	42be      	cmp	r6, r7
 80036d6:	d900      	bls.n	80036da <__ssputs_r+0x86>
 80036d8:	463e      	mov	r6, r7
 80036da:	4632      	mov	r2, r6
 80036dc:	4641      	mov	r1, r8
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	f000 fac6 	bl	8003c70 <memmove>
 80036e4:	68a3      	ldr	r3, [r4, #8]
 80036e6:	2000      	movs	r0, #0
 80036e8:	1b9b      	subs	r3, r3, r6
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	4433      	add	r3, r6
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	e7db      	b.n	80036ac <__ssputs_r+0x58>
 80036f4:	462a      	mov	r2, r5
 80036f6:	f000 fbb1 	bl	8003e5c <_realloc_r>
 80036fa:	4606      	mov	r6, r0
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d1e1      	bne.n	80036c4 <__ssputs_r+0x70>
 8003700:	4650      	mov	r0, sl
 8003702:	6921      	ldr	r1, [r4, #16]
 8003704:	f000 face 	bl	8003ca4 <_free_r>
 8003708:	e7c7      	b.n	800369a <__ssputs_r+0x46>
	...

0800370c <_svfiprintf_r>:
 800370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003710:	4698      	mov	r8, r3
 8003712:	898b      	ldrh	r3, [r1, #12]
 8003714:	4607      	mov	r7, r0
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	460d      	mov	r5, r1
 800371a:	4614      	mov	r4, r2
 800371c:	b09d      	sub	sp, #116	; 0x74
 800371e:	d50e      	bpl.n	800373e <_svfiprintf_r+0x32>
 8003720:	690b      	ldr	r3, [r1, #16]
 8003722:	b963      	cbnz	r3, 800373e <_svfiprintf_r+0x32>
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	f000 fb25 	bl	8003d74 <_malloc_r>
 800372a:	6028      	str	r0, [r5, #0]
 800372c:	6128      	str	r0, [r5, #16]
 800372e:	b920      	cbnz	r0, 800373a <_svfiprintf_r+0x2e>
 8003730:	230c      	movs	r3, #12
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	e0d1      	b.n	80038de <_svfiprintf_r+0x1d2>
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	616b      	str	r3, [r5, #20]
 800373e:	2300      	movs	r3, #0
 8003740:	9309      	str	r3, [sp, #36]	; 0x24
 8003742:	2320      	movs	r3, #32
 8003744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003748:	2330      	movs	r3, #48	; 0x30
 800374a:	f04f 0901 	mov.w	r9, #1
 800374e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038f8 <_svfiprintf_r+0x1ec>
 8003756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800375a:	4623      	mov	r3, r4
 800375c:	469a      	mov	sl, r3
 800375e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003762:	b10a      	cbz	r2, 8003768 <_svfiprintf_r+0x5c>
 8003764:	2a25      	cmp	r2, #37	; 0x25
 8003766:	d1f9      	bne.n	800375c <_svfiprintf_r+0x50>
 8003768:	ebba 0b04 	subs.w	fp, sl, r4
 800376c:	d00b      	beq.n	8003786 <_svfiprintf_r+0x7a>
 800376e:	465b      	mov	r3, fp
 8003770:	4622      	mov	r2, r4
 8003772:	4629      	mov	r1, r5
 8003774:	4638      	mov	r0, r7
 8003776:	f7ff ff6d 	bl	8003654 <__ssputs_r>
 800377a:	3001      	adds	r0, #1
 800377c:	f000 80aa 	beq.w	80038d4 <_svfiprintf_r+0x1c8>
 8003780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003782:	445a      	add	r2, fp
 8003784:	9209      	str	r2, [sp, #36]	; 0x24
 8003786:	f89a 3000 	ldrb.w	r3, [sl]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a2 	beq.w	80038d4 <_svfiprintf_r+0x1c8>
 8003790:	2300      	movs	r3, #0
 8003792:	f04f 32ff 	mov.w	r2, #4294967295
 8003796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800379a:	f10a 0a01 	add.w	sl, sl, #1
 800379e:	9304      	str	r3, [sp, #16]
 80037a0:	9307      	str	r3, [sp, #28]
 80037a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a6:	931a      	str	r3, [sp, #104]	; 0x68
 80037a8:	4654      	mov	r4, sl
 80037aa:	2205      	movs	r2, #5
 80037ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b0:	4851      	ldr	r0, [pc, #324]	; (80038f8 <_svfiprintf_r+0x1ec>)
 80037b2:	f000 fa41 	bl	8003c38 <memchr>
 80037b6:	9a04      	ldr	r2, [sp, #16]
 80037b8:	b9d8      	cbnz	r0, 80037f2 <_svfiprintf_r+0xe6>
 80037ba:	06d0      	lsls	r0, r2, #27
 80037bc:	bf44      	itt	mi
 80037be:	2320      	movmi	r3, #32
 80037c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c4:	0711      	lsls	r1, r2, #28
 80037c6:	bf44      	itt	mi
 80037c8:	232b      	movmi	r3, #43	; 0x2b
 80037ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ce:	f89a 3000 	ldrb.w	r3, [sl]
 80037d2:	2b2a      	cmp	r3, #42	; 0x2a
 80037d4:	d015      	beq.n	8003802 <_svfiprintf_r+0xf6>
 80037d6:	4654      	mov	r4, sl
 80037d8:	2000      	movs	r0, #0
 80037da:	f04f 0c0a 	mov.w	ip, #10
 80037de:	9a07      	ldr	r2, [sp, #28]
 80037e0:	4621      	mov	r1, r4
 80037e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037e6:	3b30      	subs	r3, #48	; 0x30
 80037e8:	2b09      	cmp	r3, #9
 80037ea:	d94e      	bls.n	800388a <_svfiprintf_r+0x17e>
 80037ec:	b1b0      	cbz	r0, 800381c <_svfiprintf_r+0x110>
 80037ee:	9207      	str	r2, [sp, #28]
 80037f0:	e014      	b.n	800381c <_svfiprintf_r+0x110>
 80037f2:	eba0 0308 	sub.w	r3, r0, r8
 80037f6:	fa09 f303 	lsl.w	r3, r9, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	46a2      	mov	sl, r4
 80037fe:	9304      	str	r3, [sp, #16]
 8003800:	e7d2      	b.n	80037a8 <_svfiprintf_r+0x9c>
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	1d19      	adds	r1, r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	9103      	str	r1, [sp, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfbb      	ittet	lt
 800380e:	425b      	neglt	r3, r3
 8003810:	f042 0202 	orrlt.w	r2, r2, #2
 8003814:	9307      	strge	r3, [sp, #28]
 8003816:	9307      	strlt	r3, [sp, #28]
 8003818:	bfb8      	it	lt
 800381a:	9204      	strlt	r2, [sp, #16]
 800381c:	7823      	ldrb	r3, [r4, #0]
 800381e:	2b2e      	cmp	r3, #46	; 0x2e
 8003820:	d10c      	bne.n	800383c <_svfiprintf_r+0x130>
 8003822:	7863      	ldrb	r3, [r4, #1]
 8003824:	2b2a      	cmp	r3, #42	; 0x2a
 8003826:	d135      	bne.n	8003894 <_svfiprintf_r+0x188>
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3402      	adds	r4, #2
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	9203      	str	r2, [sp, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfb8      	it	lt
 8003836:	f04f 33ff 	movlt.w	r3, #4294967295
 800383a:	9305      	str	r3, [sp, #20]
 800383c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80038fc <_svfiprintf_r+0x1f0>
 8003840:	2203      	movs	r2, #3
 8003842:	4650      	mov	r0, sl
 8003844:	7821      	ldrb	r1, [r4, #0]
 8003846:	f000 f9f7 	bl	8003c38 <memchr>
 800384a:	b140      	cbz	r0, 800385e <_svfiprintf_r+0x152>
 800384c:	2340      	movs	r3, #64	; 0x40
 800384e:	eba0 000a 	sub.w	r0, r0, sl
 8003852:	fa03 f000 	lsl.w	r0, r3, r0
 8003856:	9b04      	ldr	r3, [sp, #16]
 8003858:	3401      	adds	r4, #1
 800385a:	4303      	orrs	r3, r0
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003862:	2206      	movs	r2, #6
 8003864:	4826      	ldr	r0, [pc, #152]	; (8003900 <_svfiprintf_r+0x1f4>)
 8003866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800386a:	f000 f9e5 	bl	8003c38 <memchr>
 800386e:	2800      	cmp	r0, #0
 8003870:	d038      	beq.n	80038e4 <_svfiprintf_r+0x1d8>
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <_svfiprintf_r+0x1f8>)
 8003874:	bb1b      	cbnz	r3, 80038be <_svfiprintf_r+0x1b2>
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	3307      	adds	r3, #7
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	3308      	adds	r3, #8
 8003880:	9303      	str	r3, [sp, #12]
 8003882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003884:	4433      	add	r3, r6
 8003886:	9309      	str	r3, [sp, #36]	; 0x24
 8003888:	e767      	b.n	800375a <_svfiprintf_r+0x4e>
 800388a:	460c      	mov	r4, r1
 800388c:	2001      	movs	r0, #1
 800388e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003892:	e7a5      	b.n	80037e0 <_svfiprintf_r+0xd4>
 8003894:	2300      	movs	r3, #0
 8003896:	f04f 0c0a 	mov.w	ip, #10
 800389a:	4619      	mov	r1, r3
 800389c:	3401      	adds	r4, #1
 800389e:	9305      	str	r3, [sp, #20]
 80038a0:	4620      	mov	r0, r4
 80038a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038a6:	3a30      	subs	r2, #48	; 0x30
 80038a8:	2a09      	cmp	r2, #9
 80038aa:	d903      	bls.n	80038b4 <_svfiprintf_r+0x1a8>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0c5      	beq.n	800383c <_svfiprintf_r+0x130>
 80038b0:	9105      	str	r1, [sp, #20]
 80038b2:	e7c3      	b.n	800383c <_svfiprintf_r+0x130>
 80038b4:	4604      	mov	r4, r0
 80038b6:	2301      	movs	r3, #1
 80038b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038bc:	e7f0      	b.n	80038a0 <_svfiprintf_r+0x194>
 80038be:	ab03      	add	r3, sp, #12
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	462a      	mov	r2, r5
 80038c4:	4638      	mov	r0, r7
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_svfiprintf_r+0x1fc>)
 80038c8:	a904      	add	r1, sp, #16
 80038ca:	f3af 8000 	nop.w
 80038ce:	1c42      	adds	r2, r0, #1
 80038d0:	4606      	mov	r6, r0
 80038d2:	d1d6      	bne.n	8003882 <_svfiprintf_r+0x176>
 80038d4:	89ab      	ldrh	r3, [r5, #12]
 80038d6:	065b      	lsls	r3, r3, #25
 80038d8:	f53f af2c 	bmi.w	8003734 <_svfiprintf_r+0x28>
 80038dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038de:	b01d      	add	sp, #116	; 0x74
 80038e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e4:	ab03      	add	r3, sp, #12
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	462a      	mov	r2, r5
 80038ea:	4638      	mov	r0, r7
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <_svfiprintf_r+0x1fc>)
 80038ee:	a904      	add	r1, sp, #16
 80038f0:	f000 f87c 	bl	80039ec <_printf_i>
 80038f4:	e7eb      	b.n	80038ce <_svfiprintf_r+0x1c2>
 80038f6:	bf00      	nop
 80038f8:	08003f68 	.word	0x08003f68
 80038fc:	08003f6e 	.word	0x08003f6e
 8003900:	08003f72 	.word	0x08003f72
 8003904:	00000000 	.word	0x00000000
 8003908:	08003655 	.word	0x08003655

0800390c <_printf_common>:
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	4616      	mov	r6, r2
 8003912:	4699      	mov	r9, r3
 8003914:	688a      	ldr	r2, [r1, #8]
 8003916:	690b      	ldr	r3, [r1, #16]
 8003918:	4607      	mov	r7, r0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfb8      	it	lt
 800391e:	4613      	movlt	r3, r2
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003926:	460c      	mov	r4, r1
 8003928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800392c:	b10a      	cbz	r2, 8003932 <_printf_common+0x26>
 800392e:	3301      	adds	r3, #1
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	0699      	lsls	r1, r3, #26
 8003936:	bf42      	ittt	mi
 8003938:	6833      	ldrmi	r3, [r6, #0]
 800393a:	3302      	addmi	r3, #2
 800393c:	6033      	strmi	r3, [r6, #0]
 800393e:	6825      	ldr	r5, [r4, #0]
 8003940:	f015 0506 	ands.w	r5, r5, #6
 8003944:	d106      	bne.n	8003954 <_printf_common+0x48>
 8003946:	f104 0a19 	add.w	sl, r4, #25
 800394a:	68e3      	ldr	r3, [r4, #12]
 800394c:	6832      	ldr	r2, [r6, #0]
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	42ab      	cmp	r3, r5
 8003952:	dc28      	bgt.n	80039a6 <_printf_common+0x9a>
 8003954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003958:	1e13      	subs	r3, r2, #0
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	bf18      	it	ne
 800395e:	2301      	movne	r3, #1
 8003960:	0692      	lsls	r2, r2, #26
 8003962:	d42d      	bmi.n	80039c0 <_printf_common+0xb4>
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d020      	beq.n	80039b4 <_printf_common+0xa8>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	68e5      	ldr	r5, [r4, #12]
 8003976:	f003 0306 	and.w	r3, r3, #6
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf18      	it	ne
 800397e:	2500      	movne	r5, #0
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	bf08      	it	eq
 800398a:	1aad      	subeq	r5, r5, r2
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	bf08      	it	eq
 8003990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003994:	4293      	cmp	r3, r2
 8003996:	bfc4      	itt	gt
 8003998:	1a9b      	subgt	r3, r3, r2
 800399a:	18ed      	addgt	r5, r5, r3
 800399c:	341a      	adds	r4, #26
 800399e:	42b5      	cmp	r5, r6
 80039a0:	d11a      	bne.n	80039d8 <_printf_common+0xcc>
 80039a2:	2000      	movs	r0, #0
 80039a4:	e008      	b.n	80039b8 <_printf_common+0xac>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4652      	mov	r2, sl
 80039aa:	4649      	mov	r1, r9
 80039ac:	4638      	mov	r0, r7
 80039ae:	47c0      	blx	r8
 80039b0:	3001      	adds	r0, #1
 80039b2:	d103      	bne.n	80039bc <_printf_common+0xb0>
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	3501      	adds	r5, #1
 80039be:	e7c4      	b.n	800394a <_printf_common+0x3e>
 80039c0:	2030      	movs	r0, #48	; 0x30
 80039c2:	18e1      	adds	r1, r4, r3
 80039c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039ce:	4422      	add	r2, r4
 80039d0:	3302      	adds	r3, #2
 80039d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d6:	e7c5      	b.n	8003964 <_printf_common+0x58>
 80039d8:	2301      	movs	r3, #1
 80039da:	4622      	mov	r2, r4
 80039dc:	4649      	mov	r1, r9
 80039de:	4638      	mov	r0, r7
 80039e0:	47c0      	blx	r8
 80039e2:	3001      	adds	r0, #1
 80039e4:	d0e6      	beq.n	80039b4 <_printf_common+0xa8>
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7d9      	b.n	800399e <_printf_common+0x92>
	...

080039ec <_printf_i>:
 80039ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	7e0f      	ldrb	r7, [r1, #24]
 80039f2:	4691      	mov	r9, r2
 80039f4:	2f78      	cmp	r7, #120	; 0x78
 80039f6:	4680      	mov	r8, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	469a      	mov	sl, r3
 80039fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a02:	d807      	bhi.n	8003a14 <_printf_i+0x28>
 8003a04:	2f62      	cmp	r7, #98	; 0x62
 8003a06:	d80a      	bhi.n	8003a1e <_printf_i+0x32>
 8003a08:	2f00      	cmp	r7, #0
 8003a0a:	f000 80d9 	beq.w	8003bc0 <_printf_i+0x1d4>
 8003a0e:	2f58      	cmp	r7, #88	; 0x58
 8003a10:	f000 80a4 	beq.w	8003b5c <_printf_i+0x170>
 8003a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a1c:	e03a      	b.n	8003a94 <_printf_i+0xa8>
 8003a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a22:	2b15      	cmp	r3, #21
 8003a24:	d8f6      	bhi.n	8003a14 <_printf_i+0x28>
 8003a26:	a101      	add	r1, pc, #4	; (adr r1, 8003a2c <_printf_i+0x40>)
 8003a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a2c:	08003a85 	.word	0x08003a85
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003a15 	.word	0x08003a15
 8003a38:	08003a15 	.word	0x08003a15
 8003a3c:	08003a15 	.word	0x08003a15
 8003a40:	08003a15 	.word	0x08003a15
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003a15 	.word	0x08003a15
 8003a4c:	08003a15 	.word	0x08003a15
 8003a50:	08003a15 	.word	0x08003a15
 8003a54:	08003a15 	.word	0x08003a15
 8003a58:	08003ba7 	.word	0x08003ba7
 8003a5c:	08003ac9 	.word	0x08003ac9
 8003a60:	08003b89 	.word	0x08003b89
 8003a64:	08003a15 	.word	0x08003a15
 8003a68:	08003a15 	.word	0x08003a15
 8003a6c:	08003bc9 	.word	0x08003bc9
 8003a70:	08003a15 	.word	0x08003a15
 8003a74:	08003ac9 	.word	0x08003ac9
 8003a78:	08003a15 	.word	0x08003a15
 8003a7c:	08003a15 	.word	0x08003a15
 8003a80:	08003b91 	.word	0x08003b91
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	602a      	str	r2, [r5, #0]
 8003a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0a4      	b.n	8003be2 <_printf_i+0x1f6>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	6829      	ldr	r1, [r5, #0]
 8003a9c:	0606      	lsls	r6, r0, #24
 8003a9e:	f101 0304 	add.w	r3, r1, #4
 8003aa2:	d50a      	bpl.n	8003aba <_printf_i+0xce>
 8003aa4:	680e      	ldr	r6, [r1, #0]
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	2e00      	cmp	r6, #0
 8003aaa:	da03      	bge.n	8003ab4 <_printf_i+0xc8>
 8003aac:	232d      	movs	r3, #45	; 0x2d
 8003aae:	4276      	negs	r6, r6
 8003ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	485e      	ldr	r0, [pc, #376]	; (8003c30 <_printf_i+0x244>)
 8003ab8:	e019      	b.n	8003aee <_printf_i+0x102>
 8003aba:	680e      	ldr	r6, [r1, #0]
 8003abc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	bf18      	it	ne
 8003ac4:	b236      	sxthne	r6, r6
 8003ac6:	e7ef      	b.n	8003aa8 <_printf_i+0xbc>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	6820      	ldr	r0, [r4, #0]
 8003acc:	1d19      	adds	r1, r3, #4
 8003ace:	6029      	str	r1, [r5, #0]
 8003ad0:	0601      	lsls	r1, r0, #24
 8003ad2:	d501      	bpl.n	8003ad8 <_printf_i+0xec>
 8003ad4:	681e      	ldr	r6, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <_printf_i+0xf2>
 8003ad8:	0646      	lsls	r6, r0, #25
 8003ada:	d5fb      	bpl.n	8003ad4 <_printf_i+0xe8>
 8003adc:	881e      	ldrh	r6, [r3, #0]
 8003ade:	2f6f      	cmp	r7, #111	; 0x6f
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2308      	moveq	r3, #8
 8003ae4:	230a      	movne	r3, #10
 8003ae6:	4852      	ldr	r0, [pc, #328]	; (8003c30 <_printf_i+0x244>)
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aee:	6865      	ldr	r5, [r4, #4]
 8003af0:	2d00      	cmp	r5, #0
 8003af2:	bfa8      	it	ge
 8003af4:	6821      	ldrge	r1, [r4, #0]
 8003af6:	60a5      	str	r5, [r4, #8]
 8003af8:	bfa4      	itt	ge
 8003afa:	f021 0104 	bicge.w	r1, r1, #4
 8003afe:	6021      	strge	r1, [r4, #0]
 8003b00:	b90e      	cbnz	r6, 8003b06 <_printf_i+0x11a>
 8003b02:	2d00      	cmp	r5, #0
 8003b04:	d04d      	beq.n	8003ba2 <_printf_i+0x1b6>
 8003b06:	4615      	mov	r5, r2
 8003b08:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b0c:	fb03 6711 	mls	r7, r3, r1, r6
 8003b10:	5dc7      	ldrb	r7, [r0, r7]
 8003b12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b16:	4637      	mov	r7, r6
 8003b18:	42bb      	cmp	r3, r7
 8003b1a:	460e      	mov	r6, r1
 8003b1c:	d9f4      	bls.n	8003b08 <_printf_i+0x11c>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d10b      	bne.n	8003b3a <_printf_i+0x14e>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07de      	lsls	r6, r3, #31
 8003b26:	d508      	bpl.n	8003b3a <_printf_i+0x14e>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	6861      	ldr	r1, [r4, #4]
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	bfde      	ittt	le
 8003b30:	2330      	movle	r3, #48	; 0x30
 8003b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b3a:	1b52      	subs	r2, r2, r5
 8003b3c:	6122      	str	r2, [r4, #16]
 8003b3e:	464b      	mov	r3, r9
 8003b40:	4621      	mov	r1, r4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f8cd a000 	str.w	sl, [sp]
 8003b48:	aa03      	add	r2, sp, #12
 8003b4a:	f7ff fedf 	bl	800390c <_printf_common>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d14c      	bne.n	8003bec <_printf_i+0x200>
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	b004      	add	sp, #16
 8003b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5c:	4834      	ldr	r0, [pc, #208]	; (8003c30 <_printf_i+0x244>)
 8003b5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b62:	6829      	ldr	r1, [r5, #0]
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b6a:	6029      	str	r1, [r5, #0]
 8003b6c:	061d      	lsls	r5, r3, #24
 8003b6e:	d514      	bpl.n	8003b9a <_printf_i+0x1ae>
 8003b70:	07df      	lsls	r7, r3, #31
 8003b72:	bf44      	itt	mi
 8003b74:	f043 0320 	orrmi.w	r3, r3, #32
 8003b78:	6023      	strmi	r3, [r4, #0]
 8003b7a:	b91e      	cbnz	r6, 8003b84 <_printf_i+0x198>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	2310      	movs	r3, #16
 8003b86:	e7af      	b.n	8003ae8 <_printf_i+0xfc>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	f043 0320 	orr.w	r3, r3, #32
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	2378      	movs	r3, #120	; 0x78
 8003b92:	4828      	ldr	r0, [pc, #160]	; (8003c34 <_printf_i+0x248>)
 8003b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b98:	e7e3      	b.n	8003b62 <_printf_i+0x176>
 8003b9a:	0659      	lsls	r1, r3, #25
 8003b9c:	bf48      	it	mi
 8003b9e:	b2b6      	uxthmi	r6, r6
 8003ba0:	e7e6      	b.n	8003b70 <_printf_i+0x184>
 8003ba2:	4615      	mov	r5, r2
 8003ba4:	e7bb      	b.n	8003b1e <_printf_i+0x132>
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	6826      	ldr	r6, [r4, #0]
 8003baa:	1d18      	adds	r0, r3, #4
 8003bac:	6961      	ldr	r1, [r4, #20]
 8003bae:	6028      	str	r0, [r5, #0]
 8003bb0:	0635      	lsls	r5, r6, #24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	d501      	bpl.n	8003bba <_printf_i+0x1ce>
 8003bb6:	6019      	str	r1, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <_printf_i+0x1d4>
 8003bba:	0670      	lsls	r0, r6, #25
 8003bbc:	d5fb      	bpl.n	8003bb6 <_printf_i+0x1ca>
 8003bbe:	8019      	strh	r1, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4615      	mov	r5, r2
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	e7ba      	b.n	8003b3e <_printf_i+0x152>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	602a      	str	r2, [r5, #0]
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	6862      	ldr	r2, [r4, #4]
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f82f 	bl	8003c38 <memchr>
 8003bda:	b108      	cbz	r0, 8003be0 <_printf_i+0x1f4>
 8003bdc:	1b40      	subs	r0, r0, r5
 8003bde:	6060      	str	r0, [r4, #4]
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	2300      	movs	r3, #0
 8003be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bea:	e7a8      	b.n	8003b3e <_printf_i+0x152>
 8003bec:	462a      	mov	r2, r5
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	47d0      	blx	sl
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0ab      	beq.n	8003b52 <_printf_i+0x166>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	079b      	lsls	r3, r3, #30
 8003bfe:	d413      	bmi.n	8003c28 <_printf_i+0x23c>
 8003c00:	68e0      	ldr	r0, [r4, #12]
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	4298      	cmp	r0, r3
 8003c06:	bfb8      	it	lt
 8003c08:	4618      	movlt	r0, r3
 8003c0a:	e7a4      	b.n	8003b56 <_printf_i+0x16a>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4649      	mov	r1, r9
 8003c12:	4640      	mov	r0, r8
 8003c14:	47d0      	blx	sl
 8003c16:	3001      	adds	r0, #1
 8003c18:	d09b      	beq.n	8003b52 <_printf_i+0x166>
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	68e3      	ldr	r3, [r4, #12]
 8003c1e:	9903      	ldr	r1, [sp, #12]
 8003c20:	1a5b      	subs	r3, r3, r1
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	dcf2      	bgt.n	8003c0c <_printf_i+0x220>
 8003c26:	e7eb      	b.n	8003c00 <_printf_i+0x214>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f104 0619 	add.w	r6, r4, #25
 8003c2e:	e7f5      	b.n	8003c1c <_printf_i+0x230>
 8003c30:	08003f79 	.word	0x08003f79
 8003c34:	08003f8a 	.word	0x08003f8a

08003c38 <memchr>:
 8003c38:	4603      	mov	r3, r0
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	b2c9      	uxtb	r1, r1
 8003c3e:	4402      	add	r2, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	d101      	bne.n	8003c4a <memchr+0x12>
 8003c46:	2000      	movs	r0, #0
 8003c48:	e003      	b.n	8003c52 <memchr+0x1a>
 8003c4a:	7804      	ldrb	r4, [r0, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	428c      	cmp	r4, r1
 8003c50:	d1f6      	bne.n	8003c40 <memchr+0x8>
 8003c52:	bd10      	pop	{r4, pc}

08003c54 <memcpy>:
 8003c54:	440a      	add	r2, r1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c5c:	d100      	bne.n	8003c60 <memcpy+0xc>
 8003c5e:	4770      	bx	lr
 8003c60:	b510      	push	{r4, lr}
 8003c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c66:	4291      	cmp	r1, r2
 8003c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6c:	d1f9      	bne.n	8003c62 <memcpy+0xe>
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <memmove>:
 8003c70:	4288      	cmp	r0, r1
 8003c72:	b510      	push	{r4, lr}
 8003c74:	eb01 0402 	add.w	r4, r1, r2
 8003c78:	d902      	bls.n	8003c80 <memmove+0x10>
 8003c7a:	4284      	cmp	r4, r0
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	d807      	bhi.n	8003c90 <memmove+0x20>
 8003c80:	1e43      	subs	r3, r0, #1
 8003c82:	42a1      	cmp	r1, r4
 8003c84:	d008      	beq.n	8003c98 <memmove+0x28>
 8003c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c8e:	e7f8      	b.n	8003c82 <memmove+0x12>
 8003c90:	4601      	mov	r1, r0
 8003c92:	4402      	add	r2, r0
 8003c94:	428a      	cmp	r2, r1
 8003c96:	d100      	bne.n	8003c9a <memmove+0x2a>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ca2:	e7f7      	b.n	8003c94 <memmove+0x24>

08003ca4 <_free_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d040      	beq.n	8003d2e <_free_r+0x8a>
 8003cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb0:	1f0c      	subs	r4, r1, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bfb8      	it	lt
 8003cb6:	18e4      	addlt	r4, r4, r3
 8003cb8:	f000 f910 	bl	8003edc <__malloc_lock>
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <_free_r+0x8c>)
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	b933      	cbnz	r3, 8003cd0 <_free_r+0x2c>
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	6014      	str	r4, [r2, #0]
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ccc:	f000 b90c 	b.w	8003ee8 <__malloc_unlock>
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d908      	bls.n	8003ce6 <_free_r+0x42>
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	1821      	adds	r1, r4, r0
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	bf01      	itttt	eq
 8003cdc:	6819      	ldreq	r1, [r3, #0]
 8003cde:	685b      	ldreq	r3, [r3, #4]
 8003ce0:	1809      	addeq	r1, r1, r0
 8003ce2:	6021      	streq	r1, [r4, #0]
 8003ce4:	e7ed      	b.n	8003cc2 <_free_r+0x1e>
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b10b      	cbz	r3, 8003cf0 <_free_r+0x4c>
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x42>
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	1850      	adds	r0, r2, r1
 8003cf4:	42a0      	cmp	r0, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x6c>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	1850      	adds	r0, r2, r1
 8003cfe:	4283      	cmp	r3, r0
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	d1e0      	bne.n	8003cc6 <_free_r+0x22>
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4401      	add	r1, r0
 8003d0a:	6011      	str	r1, [r2, #0]
 8003d0c:	6053      	str	r3, [r2, #4]
 8003d0e:	e7da      	b.n	8003cc6 <_free_r+0x22>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x74>
 8003d12:	230c      	movs	r3, #12
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	e7d6      	b.n	8003cc6 <_free_r+0x22>
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	1821      	adds	r1, r4, r0
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	bf01      	itttt	eq
 8003d20:	6819      	ldreq	r1, [r3, #0]
 8003d22:	685b      	ldreq	r3, [r3, #4]
 8003d24:	1809      	addeq	r1, r1, r0
 8003d26:	6021      	streq	r1, [r4, #0]
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	6054      	str	r4, [r2, #4]
 8003d2c:	e7cb      	b.n	8003cc6 <_free_r+0x22>
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	200001a4 	.word	0x200001a4

08003d34 <sbrk_aligned>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4e0e      	ldr	r6, [pc, #56]	; (8003d70 <sbrk_aligned+0x3c>)
 8003d38:	460c      	mov	r4, r1
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	b911      	cbnz	r1, 8003d46 <sbrk_aligned+0x12>
 8003d40:	f000 f8bc 	bl	8003ebc <_sbrk_r>
 8003d44:	6030      	str	r0, [r6, #0]
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f8b7 	bl	8003ebc <_sbrk_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	d00a      	beq.n	8003d68 <sbrk_aligned+0x34>
 8003d52:	1cc4      	adds	r4, r0, #3
 8003d54:	f024 0403 	bic.w	r4, r4, #3
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d007      	beq.n	8003d6c <sbrk_aligned+0x38>
 8003d5c:	1a21      	subs	r1, r4, r0
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f8ac 	bl	8003ebc <_sbrk_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d101      	bne.n	8003d6c <sbrk_aligned+0x38>
 8003d68:	f04f 34ff 	mov.w	r4, #4294967295
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	200001a8 	.word	0x200001a8

08003d74 <_malloc_r>:
 8003d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d78:	1ccd      	adds	r5, r1, #3
 8003d7a:	f025 0503 	bic.w	r5, r5, #3
 8003d7e:	3508      	adds	r5, #8
 8003d80:	2d0c      	cmp	r5, #12
 8003d82:	bf38      	it	cc
 8003d84:	250c      	movcc	r5, #12
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	4607      	mov	r7, r0
 8003d8a:	db01      	blt.n	8003d90 <_malloc_r+0x1c>
 8003d8c:	42a9      	cmp	r1, r5
 8003d8e:	d905      	bls.n	8003d9c <_malloc_r+0x28>
 8003d90:	230c      	movs	r3, #12
 8003d92:	2600      	movs	r6, #0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4630      	mov	r0, r6
 8003d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d9c:	4e2e      	ldr	r6, [pc, #184]	; (8003e58 <_malloc_r+0xe4>)
 8003d9e:	f000 f89d 	bl	8003edc <__malloc_lock>
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	461c      	mov	r4, r3
 8003da6:	bb34      	cbnz	r4, 8003df6 <_malloc_r+0x82>
 8003da8:	4629      	mov	r1, r5
 8003daa:	4638      	mov	r0, r7
 8003dac:	f7ff ffc2 	bl	8003d34 <sbrk_aligned>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	4604      	mov	r4, r0
 8003db4:	d14d      	bne.n	8003e52 <_malloc_r+0xde>
 8003db6:	6834      	ldr	r4, [r6, #0]
 8003db8:	4626      	mov	r6, r4
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d140      	bne.n	8003e40 <_malloc_r+0xcc>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	eb04 0803 	add.w	r8, r4, r3
 8003dc8:	f000 f878 	bl	8003ebc <_sbrk_r>
 8003dcc:	4580      	cmp	r8, r0
 8003dce:	d13a      	bne.n	8003e46 <_malloc_r+0xd2>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	3503      	adds	r5, #3
 8003dd4:	1a6d      	subs	r5, r5, r1
 8003dd6:	f025 0503 	bic.w	r5, r5, #3
 8003dda:	3508      	adds	r5, #8
 8003ddc:	2d0c      	cmp	r5, #12
 8003dde:	bf38      	it	cc
 8003de0:	250c      	movcc	r5, #12
 8003de2:	4638      	mov	r0, r7
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7ff ffa5 	bl	8003d34 <sbrk_aligned>
 8003dea:	3001      	adds	r0, #1
 8003dec:	d02b      	beq.n	8003e46 <_malloc_r+0xd2>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	442b      	add	r3, r5
 8003df2:	6023      	str	r3, [r4, #0]
 8003df4:	e00e      	b.n	8003e14 <_malloc_r+0xa0>
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	1b52      	subs	r2, r2, r5
 8003dfa:	d41e      	bmi.n	8003e3a <_malloc_r+0xc6>
 8003dfc:	2a0b      	cmp	r2, #11
 8003dfe:	d916      	bls.n	8003e2e <_malloc_r+0xba>
 8003e00:	1961      	adds	r1, r4, r5
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	6025      	str	r5, [r4, #0]
 8003e06:	bf18      	it	ne
 8003e08:	6059      	strne	r1, [r3, #4]
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	bf08      	it	eq
 8003e0e:	6031      	streq	r1, [r6, #0]
 8003e10:	5162      	str	r2, [r4, r5]
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	4638      	mov	r0, r7
 8003e16:	f104 060b 	add.w	r6, r4, #11
 8003e1a:	f000 f865 	bl	8003ee8 <__malloc_unlock>
 8003e1e:	f026 0607 	bic.w	r6, r6, #7
 8003e22:	1d23      	adds	r3, r4, #4
 8003e24:	1af2      	subs	r2, r6, r3
 8003e26:	d0b6      	beq.n	8003d96 <_malloc_r+0x22>
 8003e28:	1b9b      	subs	r3, r3, r6
 8003e2a:	50a3      	str	r3, [r4, r2]
 8003e2c:	e7b3      	b.n	8003d96 <_malloc_r+0x22>
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	bf0c      	ite	eq
 8003e34:	6032      	streq	r2, [r6, #0]
 8003e36:	605a      	strne	r2, [r3, #4]
 8003e38:	e7ec      	b.n	8003e14 <_malloc_r+0xa0>
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	6864      	ldr	r4, [r4, #4]
 8003e3e:	e7b2      	b.n	8003da6 <_malloc_r+0x32>
 8003e40:	4634      	mov	r4, r6
 8003e42:	6876      	ldr	r6, [r6, #4]
 8003e44:	e7b9      	b.n	8003dba <_malloc_r+0x46>
 8003e46:	230c      	movs	r3, #12
 8003e48:	4638      	mov	r0, r7
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	f000 f84c 	bl	8003ee8 <__malloc_unlock>
 8003e50:	e7a1      	b.n	8003d96 <_malloc_r+0x22>
 8003e52:	6025      	str	r5, [r4, #0]
 8003e54:	e7de      	b.n	8003e14 <_malloc_r+0xa0>
 8003e56:	bf00      	nop
 8003e58:	200001a4 	.word	0x200001a4

08003e5c <_realloc_r>:
 8003e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e60:	4680      	mov	r8, r0
 8003e62:	4614      	mov	r4, r2
 8003e64:	460e      	mov	r6, r1
 8003e66:	b921      	cbnz	r1, 8003e72 <_realloc_r+0x16>
 8003e68:	4611      	mov	r1, r2
 8003e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	f7ff bf81 	b.w	8003d74 <_malloc_r>
 8003e72:	b92a      	cbnz	r2, 8003e80 <_realloc_r+0x24>
 8003e74:	f7ff ff16 	bl	8003ca4 <_free_r>
 8003e78:	4625      	mov	r5, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e80:	f000 f838 	bl	8003ef4 <_malloc_usable_size_r>
 8003e84:	4284      	cmp	r4, r0
 8003e86:	4607      	mov	r7, r0
 8003e88:	d802      	bhi.n	8003e90 <_realloc_r+0x34>
 8003e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e8e:	d812      	bhi.n	8003eb6 <_realloc_r+0x5a>
 8003e90:	4621      	mov	r1, r4
 8003e92:	4640      	mov	r0, r8
 8003e94:	f7ff ff6e 	bl	8003d74 <_malloc_r>
 8003e98:	4605      	mov	r5, r0
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d0ed      	beq.n	8003e7a <_realloc_r+0x1e>
 8003e9e:	42bc      	cmp	r4, r7
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	bf28      	it	cs
 8003ea6:	463a      	movcs	r2, r7
 8003ea8:	f7ff fed4 	bl	8003c54 <memcpy>
 8003eac:	4631      	mov	r1, r6
 8003eae:	4640      	mov	r0, r8
 8003eb0:	f7ff fef8 	bl	8003ca4 <_free_r>
 8003eb4:	e7e1      	b.n	8003e7a <_realloc_r+0x1e>
 8003eb6:	4635      	mov	r5, r6
 8003eb8:	e7df      	b.n	8003e7a <_realloc_r+0x1e>
	...

08003ebc <_sbrk_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4d05      	ldr	r5, [pc, #20]	; (8003ed8 <_sbrk_r+0x1c>)
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	602b      	str	r3, [r5, #0]
 8003ec8:	f7fc fd44 	bl	8000954 <_sbrk>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_sbrk_r+0x1a>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_sbrk_r+0x1a>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	200001ac 	.word	0x200001ac

08003edc <__malloc_lock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_lock+0x8>)
 8003ede:	f000 b811 	b.w	8003f04 <__retarget_lock_acquire_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200001b0 	.word	0x200001b0

08003ee8 <__malloc_unlock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_unlock+0x8>)
 8003eea:	f000 b80c 	b.w	8003f06 <__retarget_lock_release_recursive>
 8003eee:	bf00      	nop
 8003ef0:	200001b0 	.word	0x200001b0

08003ef4 <_malloc_usable_size_r>:
 8003ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ef8:	1f18      	subs	r0, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bfbc      	itt	lt
 8003efe:	580b      	ldrlt	r3, [r1, r0]
 8003f00:	18c0      	addlt	r0, r0, r3
 8003f02:	4770      	bx	lr

08003f04 <__retarget_lock_acquire_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_release_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <_init>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr

08003f14 <_fini>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr
